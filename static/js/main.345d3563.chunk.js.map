{"version":3,"sources":["assets/logo-hmif.png","serviceWorker.js","components/@Home/index.js","components/@Join/index.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Home","react_default","a","createElement","className","Helmet","src","logoHmif","alt","Component","href","history","createBrowserHistory","ReactDOM","render","Router","Switch","Route","path","component","Join","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+PCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mICbeC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACEJ,EAAAC,EAAAC,cAAA,6BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOE,IAAKC,IAAUC,IAAI,cACzCP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,QAAkDH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,SAClDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAf,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAZOK,aCDbT,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACEJ,EAAAC,EAAAC,cAAA,kCAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,aAAuDH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,QAAvD,KACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,uBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,KAAGO,KAAK,4BAAR,gBAEJT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAdOK,cCM5BE,SAAUC,OAEhBC,IAASC,OACLb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQJ,QAASA,GACbV,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWC,IAC/BnB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWnB,MAGnCqB,SAASC,eAAe,QH8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.345d3563.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-hmif.b8931e12.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport \"./index.scss\";\nimport logoHmif from \"assets/logo-hmif.png\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <Helmet>\n          <title> HMIF Tech </title>\n        </Helmet>\n\n        <div className=\"page welcome\">\n            <img className=\"logo\" src={logoHmif} alt=\"Logo HMIF\" />\n            <h1 className=\"font-weight-bold text-center\">#HMIF<span className=\"text-white\">Tech</span></h1>\n            <div className=\"font-weight-bold text-center\">Coming soon.</div>\n            <div className=\"border\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport \"./index.scss\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <Helmet>\n          <title> Join HMIF Tech </title>\n        </Helmet>\n\n        <div className=\"page join\">\n            <h1 className=\"font-weight-bold text-center\">Join #HMIF<span className=\"text-white\">Tech</span>!</h1>\n            <div className=\"text-center font-italic\">Dare to contribute?</div>\n            <div className=\"button font-weight-bold\">\n                <a href=\"https://bit.ly/pemimpi-n\">Click here!</a>\n            </div>\n            <div className=\"border\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route, Switch } from 'react-router';\nimport createBrowserHistory from 'history/createBrowserHistory';\n\nimport * as serviceWorker from './serviceWorker';\nimport Home from 'components/@Home';\nimport Join from 'components/@Join';\nimport 'styles/index.scss';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history}>\n        <Switch>\n            <Route path='/join' component={Join} />\n            <Route path='/' component={Home} />\n        </Switch>\n    </Router>,\n    document.getElementById('app'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}